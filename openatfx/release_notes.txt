0. Contents
	
	These are the release notes of the openATFX library.
	

1. Changes
	1.3.1 (Markus Renner)
		- fixed Join Handling for a join containing attributes of sequence type as well as partially invalid values in that sequence
		
	1.3.0 (Markus Renner)
		- fixed unique flag of AoFile.ao_location in asam31+ base models from false to true and made obligatory consistent false,
		  as specified by the ODS standard
		- fixed unique flags of AoNameMap.name and AoNameMap.entity_name in asam35 base model from false to true,
		  as specified by the ODS standard
		- fixed unique flag of AoPhysicalDimension.name in asam35 base model from false to true,
		  as specified by the ODS standard
	  	- fixed unique flag of AoQuantity.name in asam35 base model from false to true,
		  as specified by the ODS standard
		- fixed unique flag of AoUser.name in asam35 base model from false to true,
		  as specified by the ODS standard
	
	1.2.0 (Markus Renner)
		- added support for multiple select elements in queries at ApplElemAccessImpl.getInstancesExt()
		- fixed issue, when InstanceElementImpl.collectRelatedInstancesByRelationship() was called, but uninitialized
		  relations were contained
		- tolerated float values in local column values attribute for generation parameter values in case of seqRep implicit_linear
		- added support for a single join in queries at getInstancesExt()
	
	1.1.1 (Viktor Stöhr)
		- fix access to optional field 'AoLocalColumn.raw_datatype' in ATFXCache.getDataTypeForLocalColumnValues()
		  results in a NullPointerException if attribute is missing in model
		- restore AoServiceFactory.newAoSession(ORB orb, File atfxFile) since modified signature is not backwards compatible
	
	1.1.0 (Markus Renner)
		- Important Note: Apache commons.logging has been removed from dependencies and no logging implementation
		  is provided anymore via dependencies (previously log4j1.2). In case you relied on that in any way in your
		  application using openATFX, please make sure you provide your own logging implementation
		  (e.g. log4j version 2.16.0+). Logging can now easily be used with your logging implementation via SLF4J
		  (http://www.slf4j.org/) and its bridges.
		
		- Switched logging framework to SLF4J
		- improved efficiency of method to get next free iid for an aid, which immensely reduces reading time of
		  a big source file (issue identified and fix tested in combination with mdf4 source files)
	
	1.0.1 (Markus Renner)
		- for getInstancesExt() with queries containing optional relations, a bug is fixed that produced invalid
		  query results with different lengths in "anvsuis", when not every instance had a related instance
		- added support for queries with aggregation max

	1.0.0 (Markus Renner)
		- fixed setting of unit id for queries with * select
		- added extended compatibility mode to allow older ODS version atfx files to be handled, especially asam26
		- improved memory footprint when getting local column flags and only global flag was set
		- fixed reading of unsigned byte values that are bigger than 127
		- the obligatory flag of attributes is now initialized with the value from the base attribute, if available

	0.9.4 (Christian Rechner)
		- add implicit creation of additional AoExternalComponent attributes

	0.9.3 (Viktor Stöhr)
		- add support for inf/INF and -inf/-INF
		- add support for missing instant attribute data type 'inst_attr_uint8'

	0.9.2 (Matthias Koller)
		- improved flag handling in ApplElemAccessImpl.updateInstances() and .insertInstances()

	0.9.1 (Christian Rechner)
		- fix version information

	0.9.0 (Markus Renner, Martin Fleischer, Matthias Koller)
		- fixed issue related to Sun ORB, which is required to use when openATFx is used inside openMDM5. This ORB has a problem when an
		  empty TS_UnionSeq was not initialized with a discriminator. That led to an exception in certain scenarios of calls to getInstancesExt().
		- added support for value types dt_bit_int and dt_bit_int_beo when reading data from external components
		- fixed reading external component values with value types dt_bit_uint and dt_bit_uint_beo
		- fixed handling of raw datatypes when getting lc values via getInstancesExt() 
		- fixed typo when getting attribute by base name in ColumnImpl.getRawDataType()
		- added support for operators IS_NULL, IS_NOT_NULL and NOTINSET in query conditions
		- added support for DS_ENUM datatype in query conditions
		- improved relation path handling (selection algorithm) at condition calculations in queries
		- implemented reading of flags distributed over more than one external component per local column
		- added base models 34 (6.0.1) and 35 (6.1.0)
		- made configured base model version handling more robust
		- fallback to base model version with best compatibility (30) if configured one is lower than 29, the minimum supported;
		  allows reading from AVL systems, which use asam26
		- the invalid flag of the local column values attribute is now checked, which led to errors when loading
		  mixed sequence representation local columns before

	0.8.11 (Christian Rechner)
		- Added missing 'dt_bytestr_leo' to base model 'asam31.xml'

	0.8.10 (Markus Renner)
		- increased default maximum number of relation jumps to automatically find conditions on related instances in QueryConditionHelper
		  to 3 and also made it configurable via session context variable MAX_CONDITION_RELATION_FOLLOW
	
	0.8.9 (Markus Renner)
		- added to getInstancesExt(): support for multiple conditions connected with AND, restrictions on datatypes, opCodes and related
		  instance conditions apply
		- if localColumnInstance.getValue(flags-attribute name) is called, now the global flag attribute value is returned
		  if neither the flags could be read from a (external) component file nor from the Flags attribute itself
		- invalid characters for xml files are now replaced by _ if written to an atfx file
		- supported * wildcard in InstanceElement.getValueSeq()
		- now NaN and NAN are both supported for according values, led to exception before since Java accepts only NaN
		
	0.8.8 (Markus Renner)
		- corrected obligatory-flag of AoNameMap.alias_names from true to false in base models, since standard specifies it as LIST[0:?],
		  which implicitly makes it optional by the minimum 0

	0.8.7 (Viktor Stoehr)
		- write string values as UTF-8 strings in write_mode = file
        - read string values as UTF-8 (type_spec = dt_string_utf8) or iso-8859-1 (type_spec = dt_string)  

	0.8.6 (Martin Fleischer)
		- Fixed writing DS_BYTESTR values to external components
		- Start value for external component ordinal numbers changed from 0 to 1

	0.8.5 (Viktor Stoehr)
		- allow reading non inverse relation AoMeasurementQuantity -> AoUnit [unit]
		  while parsing AoMeasurementQuantity instance data

	0.8.4 (Masayoshi Kuroda)
		- Fixed [bugs:#6] unused start,count params of getValueVector()

	0.8.3 (Markus Renner)
		- Fixed ExtCompWriter for DS_String datatype, which did not set valuesperblock and blocksize correctly

	0.8.2 (Christian Rechner)
		- Fixed bug in case file length exceeds max int

	0.8.1 (Masayoshi Kuroda)
		- Support raw_rational/raw_rational_external values calculation

	0.8.0 (Christian Rechner)
		- Added base model "asam33" to support ASAM 6 files
		- Fixed endless loop while reading an ExternalComponent that is shorter than expected

	0.7.7 (Christian Rechner)
		- Fixed writing of flag file component attributes "valueperblock" and "blocksize"

	0.7.6 (Christian Rechner)
		- Added writing of flag file component attributes "valueperblock" and "blocksize"

	0.7.5 (Masayoshi Kuroda)
		- Implemented reading/writing DS_BYTESTR type of Local column values.

	0.7.4 (Markus Renner)
		- A very rare case in an ODS model definition causes an exception if read by openATFx. If for an application element there is an
		  attribute defined that has the same name like a base attribute in the base model (e.g. "id"), then this will cause an exception
		  like "attribute with name id already exists", if that attribute is defined before the attribute derived from the base attribute
		  is defined. This issue is now fixed by first handling all base attributes (which may change the name of the attribute in the base model)
		  and after that all other attributes, which then can use the name without any problem, since it is "free" again.

	0.7.3 (Matthias Koller, Markus Renner)
		- switched from woodstox-core-lgpl to woodstox-core-asl
		- implemented method ValueMatrixOnSubMatrixImpl#getValue()
		- extended ApplElemAccessImpl#getInstancesExt() to also accept RelationAttributes on the N-side in anuSeq and condSeq
		- added support for * wildcard at method ApplElemAccessImpl.getInstancesExt()
		- allowed DS_STRING for conditions in ApplElemAccessImpl.getInstancesExt()
		- improved error message at existence check of select attributes of query in ApplElemAccessImpl.getInstancesExt()
		- skipped values attribute of AoLocalColumns to be returned on ApplElemAccessImpl.getInstances() calls with attribute wildcard
		- made m:n relations supported at ApplElemAccessImpl.updateInstances(), handled DataType DS_LONGLONG additionally to DT_LONGLONG
		- added workarounds in methods of ByteBuffer to enable builds with both java 8 and java >=9

	0.7.2 (Christian Rechner)
		- skip parse errors in documentation section to be able to read files having invalid
		  documentation section

	0.7.1 (Elektronische Fahrwerksysteme GmbH)
		- changed type of AoExternalComponent.inioffset to DT_LONGLONG

	0.7.0 (Markus Renner)
		- implemented method ApplElemAccessImpl.updateInstances()
		- added support for * wildcard at method ApplElemAccessImpl.getInstances()
		- small addition to an error message for easier error tracking
		- added tolerance of DataType DT_LONG for the AoLocalColumn.sequence_representation
		  attribute at method AtfxCache.setInstanceValue() which was preventing atfx
		  generation for given data coming directly from a Horiba Stars system.
		- Fixed bug in base model 'asam32' when AoExternalComponent is missing

	0.6.9 (Markus Renner)
		- prevented Nullpointer Exceptions when a insertInstances() was called
		  with relation attributes, where a Flag was null and the IID was a LongLong 0

	0.6.8 (Christian Rechner)
		- Fixed bug in method 'ApplElemAccess->setRelInst' with mode 'SetType.REMOVE'

	0.6.7 (Christian Rechner)
		- Added test cases for reading official ASAM 6.0 example files
		- Fixed adjust datatype in case for inline XML values and raw datatype
		  differs from measurement quantity datatype (to make ASAM example working)

	0.6.6 (Masayoshi Kuroda)
		- Added support for new ASAM ODS 6.0 'DT_BYTESTR'

	0.6.5 (Gigatronik Ingolstadt GmbH)
		- Escape '+' in patterns
		- Change messages in bin-file-related errors
		- Support LocalColumn-inline-flags

	0.6.4 (Christian Rechner)
		- Added implicit creation of 'AoExternalComponent->ordinal_number' if not existing in
		  application model

	0.6.3 (Christian Rechner, Markus Renner)
		- Improved method 'ApplElemAccess->insertInstances()':
		  Support for 1:n relations and instance attributes.
		- Added base model 'asam32'
		- Now supports DS_BYTESTR datatype for external component file writing
		- Bytestreams are split when EXT_COMP_SEGSIZE is reached

	0.6.2 (Christian Rechner)
		- Added ability to start as CORBA server from command line.

	0.6.1 (Christian Rechner)
		- Call garbage collector on session close
		- Improved method 'AppElemAccess->getInstances()'
		- Added support for sequence_representation=implicit_linear of type DT_STRING
		- Added license file for Apache2 license

	0.6.0 (Christian Rechner)
		- Added interface for file system abstraction layer
		- Fixed reading flags from either inline XML or component file
		- Added support for value types:
		  * dt_short_beo
		  * dt_long_beo
		  * dt_longlong_beo
		  * ieeefloat4_beo
		  * ieeefloat8_beo
		  * dt_ushort_beo
		  * dt_ulong_beo
		  * dt_bit_uint
		  * dt_bit_uint_beo

	0.5.6 (Christian Rechner)
	    - Added buffer when reading external component files to increase performance
	    - Implemented reading flags from external component file
	    - Implemented handling flags in component file
	    - Support for multiple external component instances at one local column instance

	0.5.5 (Christian Rechner)
	    - Included patch from Olaf Flebbe to support single bits with dt_bit_uint in external components
	    - Changed name generation of external component files from fixed "data_1.bin" to ATFX file name

	0.5.4 (Christian Rechner)
	    - Implemented InstanceElementIterator with flyweight pattern
	      to improve memory consumption.

	0.5.3 (Christian Rechner)
	    - Implemented methods of ValueMatrix on AoSubMatrix:
	      * getMode
	      * getColumnCount
	      * getRowCount
	      * listColumns
	      * listIndependentColumns
	      * getColumns
	      * getIndependentColumns
	      * destroy
	    - Implemented methods of Column on ValueMatrix on AoSubMatrix
	      * getSourceMQ
	      * getName
	      * getFormula
	      * isIndependent
	      * getDataType
	      * getSequenceRepresentation
	      * getGenerationParameters
	      * getRawDataType
	      * destroy
	    - Changed reading of external component files to 'FileChannel'
	      for performance reasons

	0.5.2 (Gigatronik Ingolstadt GmbH)
	    - Added automatic determination for missing inverse relations of ATFX files.
	    - Upgrade to woodstox 4.4.1

	0.5.1 (Christian Rechner)
	    - Upgrade to woodstox 4.3.0
	    - Increased default value of context parameter 'EXT_COMP_SEGSIZE' to 500 MB
	    - Added handling of new ASAM ODS 5.3.0 base attributes 'ao_bit_count' and 'ao_bit_offset' 
		- Implemented writing of DT_BOOLEAN values to external component files		

	0.5.0 (Christian Rechner)
	    - Upgrade to ODS IDL 5.3.0 (not all new methods implemented)
		- Added base model definition for 'asam31'
	    - Fixed wrong data type of base attributes 'start_offset' and
	      'flags_start_offset' (DT_LONG) in base model 'asam29'.
	    - Upgrade to woodstox 4.2.0
	    - Included patch from O.Flebbe: attribute 'flags' of 'AoLocalColumn' is optional

	0.4.3 (Christian Rechner)
		- Removed converter and exporter code.
		- Changed method of reading external component files from mapped memory to
		  'normal' buffered reader (Many thanks to Olaf Flebbe!)
		- Fixed wrong warning and added exception on method 'setIsUnique' of interface
		  'ApplicationAttribute' when trying to reduce uniquness of application attribute
		  derived from unique base attribute.
		- Upgrade of woodstox to version 4.1.5.

	0.4.2 (Christian Rechner)
		- Added property to switch writing external component instances.
		- Added check if application element of type 'AoLocalColumn' exists
		  to avoid null pointer exception.
		- Added tests for writing external component files
	    - Implemented writing external component files for data types
	      * DS_BYTE
		  * DS_LONGLONG
          * DS_STRING
          * DS_DATE
		- Implemented reading external component files for data types
		  * DS_BYTE
		  * DS_LONGLONG
		  * DS_STRING
		  * DS_DATE
		  and type specs
		  * dt_byte
		  * dt_longlong
		  * dt_longlong_beo
		  * dt_string
		  
	0.4.1 (Christian Rechner)
		- Added reading generation params from 'values', if attribute value is null
		- Implemented exporting of local column values of type 'DS_STRING' (always to XML!)
		- Implemented 'upcastMeasurement' and 'upcastSubMatrix'
		- Implemented writing to 'components' instead of AoExternal component instances
		  depending of session context property 'WRITE_EXTERNALCOMPONENTS'
		- Implemented exporting the 'AoEnvironment', 'AoNameMap' and 'AoAttributeMap' instances
		- Fixed reading / writing of application attribute values of type 'DS_DATE'
		- Fixed correct writing of 'sequence_representation' when exporting to
		  component files
		  
	0.4.0 (Christian Rechner)
		- Multiple performance tunings in reading/writing (up to 50% faster :-))
		- Fixes in memory consumption
		- Fixed bug in DAT2ATFX converter template application model
		- Changed default context variable INDENT_XML to FALSE
		- Update to JUnit 4.10
		- Update to woodstox 4.1.3
		- Fixed bug report: http://community.openmdm.org/issue/1848

	0.3.1 (Christian Rechner)
		- The data type of base attributes "start_offset" and "flags_start_offset" now
		  be written to the ATFX
		- Added writing of "autogenerated" at application attribute
		- Implemented returning the unit at methods 'getValue' and 'getValueSeq'
		- Implemented reading external component files for data types
		  * DS_LONG
		  * DS_FLOAT
		  * DS_DOUBLE
		  * DS_COMPLEX
		  * DS_DCOMPLEX
		  and type specs
		  * dt_long
		  * dt_long_beo
		  * ieeefloat4
		  * ieeefloat4_beo
		  * ieeefloat8
		  * ieeefloat8_beo
		
	0.3.0 (Christian Rechner)
		- Completely changed the behaviour of creating application relations
		  the fulfil the ODS specification in automatically creating inverse
		  relations.
		  CAUTION: THIS MAY BREAK EXISTING CLIENT APPLICATIONS
		- Added skipping the implicit creation the 'AoExternalComponent' applElem
		  if no 'AoLocalColumn' application element exists.
		- Fixed incrementing the instance ids.

	0.2.2 (Christian Rechner)
		- Added ability to DIAdem DAT to ATFX converter to convert data sets
		  having different no of rows in the header file as in the binary data.
		- Added ability to change the datatype of an application attribute
		  derived from a base attribute. This necessary for several external
		  component attributes.
		- Removed wrong mandatory flag at attributes 'sequence_representation'
		  and 'generation_parameters' of 'AoLocalColumn'.

	0.2.1 (Christian Rechner)
		- Completed implementation of the DIAdem DAT to ATFX converter.
		- Added checking of having the right base relations in case of
		  multiple children.

	0.2.0 (Christian Rechner)
		- Enabled handling of LocalColumns having no values set.
		- Suppress writing of NULL attribute values.
		- Added DIAdem DAT to ATFX converter.
		- Implemented method "ApplElemAccess"->"deleteInstances".
		- Fixed method "isObligatory" of the interface ApplicationAttribute.
		- Fixed misspelling of ApplicationAttribute tag from "autogenerated" to "autogenerate".

	0.1.9 (Christian Rechner)
		- Further performance tunings.

	0.1.8 (Christian Rechner)
		- Performance tuning in method "getInstances" for pattern "*".
		- Performance tuning in methods "getValue" and "getValueByBaseName".
		- Several minor performance tunings.
		- Bugfix: Pattern of method "listAttributes" has not been taken into account for instance attributes.

	0.1.7 (Florian Steinberger, Christian Rechner)
		- Added limited query implementation.
		- Application attributes will now always be considered obligatory, if base attribute is defined as non-optional in the ODS 5.2 specification.
		- Fixed case insensitive lookup of base elements.

	0.1.6
		- Added workaround to read DIAdem ATFX files having the wrong relation range (100).
		- Added implicit creation of the application element 'AoExternalComponent', if missing.

	0.1.5
		- Fixed session close problem with JacORB.

	0.1.4
		- Ident XML output if context parameter "INDENT_XML=YES".
		- Omit writing of "<instance_data>" section if not instances available.
		- Added test for "InstanceElementIterator".
		- Fixed case sensitivity when comparing base attribute/relation names.
		  (Base element/attribute/relation names has to be compared case insensitive)
		- Fixed writing of LocalColumn values.
		
	0.1.3
		- Fixed FindBugs warnings.
		- Changed CORBA pattern of InstanceElement objects to FlighWeight using a ServantLocator.
		- Added memory leak detection test.
		- Performed memory leak test with 100000 session.

	0.1.2
		- Fixed parsing application relations with a base relation without relation range information.
		- Added ability to read application relations without having to information of the
		  inverse relation in the ATFX file.

	0.1.1
		- Fixed parsing of LocalColumn values of type A_TIMESTRING.

	0.1.0
		- Initial release.

2. Known Bugs

	- none

3. Future changes

	- implement writing of flag files
	- implement query/extended query
	- implement all methods of 'ValueMatrix'