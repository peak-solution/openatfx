package de.rechner.openatfx.basestructure;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.asam.ods.AoException;
import org.asam.ods.BaseStructure;
import org.asam.ods.ErrorCode;
import org.asam.ods.SeverityFlag;
import org.omg.CORBA.ORB;
import org.omg.CORBA.Policy;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.PortableServer.IdAssignmentPolicyValue;
import org.omg.PortableServer.IdUniquenessPolicyValue;
import org.omg.PortableServer.ImplicitActivationPolicyValue;
import org.omg.PortableServer.LifespanPolicyValue;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.RequestProcessingPolicyValue;
import org.omg.PortableServer.ServantRetentionPolicyValue;
import org.omg.PortableServer.ThreadPolicyValue;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.AdapterAlreadyExists;
import org.omg.PortableServer.POAPackage.InvalidPolicy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public abstract class BasicModelReader implements BaseModelReader {

    private static final Logger LOG = LoggerFactory.getLogger(BasicModelReader.class);

    /** Workaround for the missing isAutogenerated() getter of the ODS BaseAttribute class. */
    protected static Map<String, Map<String, Boolean>> autogeneratedFlags = new HashMap<>();

    abstract BaseStructure readBaseStructure(String baseModelVersion, POA poa) throws AoException;

    /**
     *
     */
    public BaseStructure getBaseModel(ORB orb, String baseModelVersion) throws AoException {
        // create POA
        POA poa = createBaseStructurePOA(orb);
        LOG.debug("Try to read model file for version {}", baseModelVersion);
        BaseStructure baseStructure = readBaseStructure(baseModelVersion, poa);

        return baseStructure;
    }

    /**
     * Creates a new POA for all elements for the base structure.
     * 
     * @param orb The ORB object.
     * @return The POA.
     * @throws AoException Error creating POA.
     */
    protected POA createBaseStructurePOA(ORB orb) throws AoException {
        try {
            String poaName = "BaseStructure.POA." + UUID.randomUUID().toString();
            POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            POA poa = rootPOA.create_POA(poaName, null, new Policy[] {
                    rootPOA.create_id_assignment_policy(IdAssignmentPolicyValue.SYSTEM_ID),
                    rootPOA.create_lifespan_policy(LifespanPolicyValue.TRANSIENT),
                    rootPOA.create_id_uniqueness_policy(IdUniquenessPolicyValue.UNIQUE_ID),
                    rootPOA.create_implicit_activation_policy(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION),
                    rootPOA.create_servant_retention_policy(ServantRetentionPolicyValue.RETAIN),
                    rootPOA.create_request_processing_policy(RequestProcessingPolicyValue.USE_ACTIVE_OBJECT_MAP_ONLY),
                    rootPOA.create_thread_policy(ThreadPolicyValue.ORB_CTRL_MODEL) });
            poa.the_POAManager().activate();
            return poa;
        } catch (InvalidName e) {
            LOG.error(e.getMessage(), e);
            throw new AoException(ErrorCode.AO_UNKNOWN_ERROR, SeverityFlag.ERROR, 0, e.getMessage());
        } catch (AdapterAlreadyExists e) {
            LOG.error(e.getMessage(), e);
            throw new AoException(ErrorCode.AO_UNKNOWN_ERROR, SeverityFlag.ERROR, 0, e.getMessage());
        } catch (InvalidPolicy e) {
            LOG.error(e.getMessage(), e);
            throw new AoException(ErrorCode.AO_UNKNOWN_ERROR, SeverityFlag.ERROR, 0, e.getMessage());
        } catch (AdapterInactive e) {
            LOG.error(e.getMessage(), e);
            throw new AoException(ErrorCode.AO_UNKNOWN_ERROR, SeverityFlag.ERROR, 0, e.getMessage());
        }
    }

    /**
     * Workaround for missing isAutogenerated() getter at ODS BaseAttribute.
     * 
     * @param baseElementName
     * @param baseAttrName
     * @return true, if the given base attribute is configured as autogenerated
     */
    public static boolean isAutogenerated(String baseElementName, String baseAttrName) {
        Map<String, Boolean> flagsByAttrName = autogeneratedFlags.get(baseElementName);
        if (flagsByAttrName != null) {
            Boolean flag = flagsByAttrName.get(baseAttrName);
            if (flag != null && flag) {
                return true;
            }
        }
        return false;
    }
}
