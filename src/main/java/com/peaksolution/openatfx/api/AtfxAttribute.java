package com.peaksolution.openatfx.api;

import java.util.Objects;

import org.asam.ods.ErrorCode;

import com.peaksolution.openatfx.io.AtfxTagConstants;


public class AtfxAttribute implements Attribute {

    private AtfxElement parentElement;
    private final int attrNo;
    private String name;
    private BaseAttribute baseAttribute;
    private DataType dataType;
    private long unitId;
    private String enumName;
    private int length;
    private boolean unique;
    private boolean obligatory;
    private boolean autogenerated;
    private boolean isExtendedCompatibilityMode;

    /**
     * @param element
     * @param attrNo
     * @param name
     * @param baseAttribute
     * @param dt
     * @param unitId
     * @param enumName
     * @param length if set to {@literal <} 1, the default length will be set according to dataType.
     * @param unique
     * @param obligatory
     * @param autogenerated
     * @param isExtendedCompatibilityMode
     */
    public AtfxAttribute(AtfxElement element, int attrNo, String name, BaseAttribute baseAttribute, DataType dt,
            long unitId, String enumName, int length, boolean unique, boolean obligatory, boolean autogenerated,
            boolean isExtendedCompatibilityMode) {
        this.parentElement = element;
        this.attrNo = attrNo;
        this.name = name;
        setBaseAttribute(baseAttribute);
        if (dt != null) {
            setDataType(dt);
        }
        this.enumName = enumName;
        this.unitId = unitId;
        setLength(length);
        setUnique(unique);
        setObligatory(obligatory);
        setAutogenerated(autogenerated);
        this.isExtendedCompatibilityMode = isExtendedCompatibilityMode;
    }

    @Override
    public boolean isBaseAttrDerived() {
        return baseAttribute != null;
    }
    
    @Override
    public boolean isLocalColumnValuesAttr() {
        if (parentElement != null && isBaseAttrDerived()) {
            return AtfxTagConstants.LC.equalsIgnoreCase(parentElement.getType())
                    && AtfxTagConstants.LC_VALUES.equalsIgnoreCase(baseAttribute.getName());
        }
        return false;
    }
    
    @Override
    public boolean isLocalColumnFlagsAttr() {
        if (parentElement != null && isBaseAttrDerived()) {
            return AtfxTagConstants.LC.equalsIgnoreCase(parentElement.getType())
                    && AtfxTagConstants.LC_FLAGS.equalsIgnoreCase(baseAttribute.getName());
        }
        return false;
    }
    
    @Override
    public boolean isLocalColumnGenParamsAttr() {
        if (parentElement != null && isBaseAttrDerived()) {
            return AtfxTagConstants.LC.equalsIgnoreCase(parentElement.getType())
                    && AtfxTagConstants.LC_GEN_PARAMS.equalsIgnoreCase(baseAttribute.getName());
        }
        return false;
    }

    @Override
    public long getAid() {
        return parentElement.getId();
    }

    @Override
    public int getAttrNo() {
        return attrNo;
    }

    @Override
    public void setName(String newName) {
        // check name length
        if (newName == null || newName.length() < 1) {
            throw new OpenAtfxException(ErrorCode.AO_BAD_PARAMETER, "newName must not be empty");
        }
        if (newName.length() > 30) {
            throw new OpenAtfxException(ErrorCode.AO_BAD_PARAMETER,
                                        "Attribute name must not be greater than 30 characters");
        }
        // check for name equality
        if (name != null && name.equals(newName)) {
            return;
        }
        // check for existing application attribute name
        AtfxAttribute existingAttribute = parentElement.getAttributeByName(newName);
        if (existingAttribute != null) {
            throw new OpenAtfxException(ErrorCode.AO_DUPLICATE_NAME,
                                        "Attribute with name '" + newName + "' already exists for " + parentElement);
        }

        name = newName;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public String getBaseName() {
        if (baseAttribute == null) {
            return null;
        }
        return baseAttribute.getName();
    }

    public BaseAttribute getBaseAttribute() {
        return baseAttribute;
    }

    public void setBaseAttribute(BaseAttribute baseAttribute) {
        if (baseAttribute != null) {
            // check if already an application attribute exists with same base attribute
            Integer existingAttrNo = parentElement.getAttrNoByBaseName(baseAttribute.getName());
            if (existingAttrNo != null && !existingAttrNo.equals(this.attrNo)) {
                throw new OpenAtfxException(ErrorCode.AO_DUPLICATE_BASE_ATTRIBUTE,
                                            "Duplicate base attribute '" + baseAttribute.getName() + "'");
            }

            // set new datatype from base attribute
            if (this.dataType == null) {
                this.dataType = baseAttribute.getDataType();
            }

            // set enumeration definition from base attribute
            if (this.dataType == DataType.DT_ENUM || this.dataType == DataType.DS_ENUM) {
                this.enumName = baseAttribute.getEnumName();
            } else {
                this.enumName = null;
            }

            this.unique = baseAttribute.isUnique();
            this.obligatory = baseAttribute.isObligatory();
            this.autogenerated = baseAttribute.isAutogenerated();
        }

        this.baseAttribute = baseAttribute;
    }

    @Override
    public void setDataType(DataType dataType) {
        if (dataType == null) {
            throw new OpenAtfxException(ErrorCode.AO_BAD_PARAMETER, "Parameter 'dataType' must not be null");
        }

        this.dataType = dataType;
        setLength(0);
    }

    @Override
    public DataType getDataType() {
        // custom type set
        if (dataType != null) {
            return dataType;
        }
        // no custom type set use type from base attribute
        else if (this.baseAttribute != null) {
            return this.baseAttribute.getDataType();
        }
        // no datatype, return DT_UNKNOWN
        return DataType.DT_UNKNOWN;
    }

    @Override
    public void setUnitId(long unitId) {
        this.unitId = unitId;
    }

    @Override
    public long getUnitId() {
        return unitId;
    }

    @Override
    public void setEnumName(String enumName) {
        // incorrect datatype
        if (DataType.DT_ENUM != dataType && DataType.DS_ENUM != dataType) {
            throw new OpenAtfxException(ErrorCode.AO_INVALID_DATATYPE,
                                        "Invalid datatype " + dataType
                                                + " to get enumeration from attribute '" + getName() + "' at element '"
                                                + parentElement.getName() + "'.");
        }
        // check for equality
        if (enumName != null && enumName.equals(this.enumName)) {
            return;
        }

        if (!isExtendedCompatibilityMode && this.baseAttribute != null) {
            throw new OpenAtfxException(ErrorCode.AO_BAD_PARAMETER,
                                        "changing the enumeration definition not allowed for application attribute derived from base attribute");
        }
        this.enumName = enumName;
    }

    @Override
    public String getEnumName() {
        return enumName;
    }

    @Override
    public void setLength(Integer length) {
        if (length != null && length > 0) {
            this.length = length;
        } else {
            // set default length
            DataType dt = getDataType();
            if (dt == DataType.DT_STRING || dt == DataType.DS_STRING || dt == DataType.DT_EXTERNALREFERENCE
                    || dt == DataType.DS_EXTERNALREFERENCE) {
                this.length = 254;
            } else if (dt == DataType.DT_DATE || dt == DataType.DS_DATE) {
                this.length = 30;
            } else {
                this.length = 1;
            }
        }
    }

    @Override
    public int getLength() {
        return length;
    }

    @Override
    public void setUnique(boolean unique) {
        // it is not allowed to reduce the unique flag from base attribute
        if (this.baseAttribute != null && !unique && this.baseAttribute.isUnique()) {
            throw new OpenAtfxException(ErrorCode.AO_BAD_PARAMETER,
                                        "Reducing the uniqueness of attributes derived from unique base attributes is not allowed [element="
                                                + parentElement.getName() + ", aaName=" + getName() + ",baName="
                                                + baseAttribute.getName() + "]");
        }
        this.unique = unique;
    }

    @Override
    public boolean isUnique() {
        return unique;
    }

    @Override
    public void setObligatory(boolean obligatory) {
        // obligatory flag of obligatory base attribute is not reducible
        boolean mustBeObligatory = false;
        String baseAttributeName = null;
        String baseElementName = null;
        if (this.baseAttribute != null && baseAttribute.isObligatory()) {
            mustBeObligatory = true;
        }
        if (mustBeObligatory && !obligatory) {
            if (isExtendedCompatibilityMode) {
                this.obligatory = true;
            } else {
                throw new OpenAtfxException(ErrorCode.AO_IS_BASE_ATTRIBUTE,
                                            "Unable to set obligatory flag to 'false' for application attribute derived"
                                                    + " from the obligatory base attribute '" + baseAttributeName
                                                    + "' of base element" + " '" + baseElementName + "'.");
            }
        }

        this.obligatory = obligatory;
    }

    @Override
    public boolean isObligatory() {
        // if the base attribute is obligatory, always return true
        if (this.baseAttribute != null && baseAttribute.isObligatory()) {
            return true;
        }
        return obligatory;
    }

    public void setAutogenerated(boolean autogenerated) {
        // it is not allowed to reduce the autogenerated flag from base attribute
        if (this.baseAttribute != null && !autogenerated && this.baseAttribute.isAutogenerated()) {
            throw new OpenAtfxException(ErrorCode.AO_BAD_PARAMETER,
                                        "Autogeneration of attribute derived from autogenerated base attribute cannot be removed [element="
                                                + parentElement.getName() + ", aaName=" + getName() + ",baName="
                                                + baseAttribute.getName() + "]");
        }
        this.autogenerated = autogenerated;
    }

    @Override
    public boolean isAutogenerated() {
        return autogenerated;
    }

    @Override
    public String toString() {
        return "Attribute [aid=" + getAid() + ", name=" + name + (baseAttribute == null ? "" : ", baseName=" + baseAttribute.getName()) + ", dt="
                + dataType + ", unitId=" + unitId + "]";
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAid(), name);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AtfxAttribute other = (AtfxAttribute) obj;
        return getAid() == other.getAid() && Objects.equals(name, other.name);
    }
}
