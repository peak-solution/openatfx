/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package de.rechner.openatfx.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimeSeriesValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeSeriesValue\",\"namespace\":\"de.rechner.openatfx.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"]},{\"name\":\"relTime\",\"type\":[\"null\",\"long\"]},{\"name\":\"numVal\",\"type\":[\"null\",\"double\"]},{\"name\":\"txtVal\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long timestamp;
  @Deprecated public java.lang.Long relTime;
  @Deprecated public java.lang.Double numVal;
  @Deprecated public java.lang.CharSequence txtVal;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TimeSeriesValue() {}

  /**
   * All-args constructor.
   */
  public TimeSeriesValue(java.lang.Long timestamp, java.lang.Long relTime, java.lang.Double numVal, java.lang.CharSequence txtVal) {
    this.timestamp = timestamp;
    this.relTime = relTime;
    this.numVal = numVal;
    this.txtVal = txtVal;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return relTime;
    case 2: return numVal;
    case 3: return txtVal;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: relTime = (java.lang.Long)value$; break;
    case 2: numVal = (java.lang.Double)value$; break;
    case 3: txtVal = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'relTime' field.
   */
  public java.lang.Long getRelTime() {
    return relTime;
  }

  /**
   * Sets the value of the 'relTime' field.
   * @param value the value to set.
   */
  public void setRelTime(java.lang.Long value) {
    this.relTime = value;
  }

  /**
   * Gets the value of the 'numVal' field.
   */
  public java.lang.Double getNumVal() {
    return numVal;
  }

  /**
   * Sets the value of the 'numVal' field.
   * @param value the value to set.
   */
  public void setNumVal(java.lang.Double value) {
    this.numVal = value;
  }

  /**
   * Gets the value of the 'txtVal' field.
   */
  public java.lang.CharSequence getTxtVal() {
    return txtVal;
  }

  /**
   * Sets the value of the 'txtVal' field.
   * @param value the value to set.
   */
  public void setTxtVal(java.lang.CharSequence value) {
    this.txtVal = value;
  }

  /** Creates a new TimeSeriesValue RecordBuilder */
  public static de.rechner.openatfx.avro.TimeSeriesValue.Builder newBuilder() {
    return new de.rechner.openatfx.avro.TimeSeriesValue.Builder();
  }
  
  /** Creates a new TimeSeriesValue RecordBuilder by copying an existing Builder */
  public static de.rechner.openatfx.avro.TimeSeriesValue.Builder newBuilder(de.rechner.openatfx.avro.TimeSeriesValue.Builder other) {
    return new de.rechner.openatfx.avro.TimeSeriesValue.Builder(other);
  }
  
  /** Creates a new TimeSeriesValue RecordBuilder by copying an existing TimeSeriesValue instance */
  public static de.rechner.openatfx.avro.TimeSeriesValue.Builder newBuilder(de.rechner.openatfx.avro.TimeSeriesValue other) {
    return new de.rechner.openatfx.avro.TimeSeriesValue.Builder(other);
  }
  
  /**
   * RecordBuilder for TimeSeriesValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeSeriesValue>
    implements org.apache.avro.data.RecordBuilder<TimeSeriesValue> {

    private java.lang.Long timestamp;
    private java.lang.Long relTime;
    private java.lang.Double numVal;
    private java.lang.CharSequence txtVal;

    /** Creates a new Builder */
    private Builder() {
      super(de.rechner.openatfx.avro.TimeSeriesValue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(de.rechner.openatfx.avro.TimeSeriesValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.relTime)) {
        this.relTime = data().deepCopy(fields()[1].schema(), other.relTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numVal)) {
        this.numVal = data().deepCopy(fields()[2].schema(), other.numVal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.txtVal)) {
        this.txtVal = data().deepCopy(fields()[3].schema(), other.txtVal);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TimeSeriesValue instance */
    private Builder(de.rechner.openatfx.avro.TimeSeriesValue other) {
            super(de.rechner.openatfx.avro.TimeSeriesValue.SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.relTime)) {
        this.relTime = data().deepCopy(fields()[1].schema(), other.relTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numVal)) {
        this.numVal = data().deepCopy(fields()[2].schema(), other.numVal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.txtVal)) {
        this.txtVal = data().deepCopy(fields()[3].schema(), other.txtVal);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'timestamp' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'relTime' field */
    public java.lang.Long getRelTime() {
      return relTime;
    }
    
    /** Sets the value of the 'relTime' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder setRelTime(java.lang.Long value) {
      validate(fields()[1], value);
      this.relTime = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'relTime' field has been set */
    public boolean hasRelTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'relTime' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder clearRelTime() {
      relTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'numVal' field */
    public java.lang.Double getNumVal() {
      return numVal;
    }
    
    /** Sets the value of the 'numVal' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder setNumVal(java.lang.Double value) {
      validate(fields()[2], value);
      this.numVal = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'numVal' field has been set */
    public boolean hasNumVal() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'numVal' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder clearNumVal() {
      numVal = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'txtVal' field */
    public java.lang.CharSequence getTxtVal() {
      return txtVal;
    }
    
    /** Sets the value of the 'txtVal' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder setTxtVal(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.txtVal = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'txtVal' field has been set */
    public boolean hasTxtVal() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'txtVal' field */
    public de.rechner.openatfx.avro.TimeSeriesValue.Builder clearTxtVal() {
      txtVal = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TimeSeriesValue build() {
      try {
        TimeSeriesValue record = new TimeSeriesValue();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.relTime = fieldSetFlags()[1] ? this.relTime : (java.lang.Long) defaultValue(fields()[1]);
        record.numVal = fieldSetFlags()[2] ? this.numVal : (java.lang.Double) defaultValue(fields()[2]);
        record.txtVal = fieldSetFlags()[3] ? this.txtVal : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
